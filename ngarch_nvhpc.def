BootStrap: docker
From: nvcr.io/nvidia/nvhpc:{{ NVHPC_VERSION }}-devel-cuda_multi-ubuntu22.04
# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/nvhpc

%arguments
    NVHPC_VERSION=25.5
    CUDA_VERSION=12.6

%labels
    Author alexander.pletzer@niwa.co.nz
    Version 0.0.1

%help
    Build a portable environment for LFRic code development based on the NVIDIA compilers

%startscript
    . /usr/local/build/spack/share/spack/setup-env.sh

%environment

    # set up the environment for the NVIDIA compilers
    export PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/{{ NVHPC_VERSION }}/compilers/bin:$PATH

    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    # location of mpi.mod
    export MPI_INC_DIR="/opt/nvidia/hpc_sdk/Linux_x86_64/{{ NVHPC_VERSION }}/comm_libs/{{ CUDA_VERSION }}/hpcx/hpcx-2.14/ompi/lib/"
    export PATH=/root/.local/bin:$PATH

    export INSTALL_DIR="/usr/local"
    export PATH=$INSTALL_DIR/bin:$PATH
    export FC=nvfortran 
    export FPP="cpp -P -x f95-cpp-input"
    export FFLAGS="-I${INSTALL_DIR}/include"
    export LDFLAGS="-L{$INSTALL_DIR}/lib -L/usr/local/xios/lib"
    export LDMPI="mpif90"

    # xios
    export NETCDF_DIR="$INSTALL_DIR"
    export HDF5_DIR="$INSTALL_DIR"

    # pFUnit
    export F90_VENDOR=PG
    export F90=$FC
    export CC=nvcc
    export CXX=nvc++
    export MPIF90=mpif90
    export MPICC=mpicc
    export MPICXX=mpicxx

    # need to access mpi.mod
    export FFLAGS="-I$MPI_INC_DIR $FFLAGS -I/usr/local/xios/include/"

    export EXTRA_NETCDF_LIBRARIES="hdf5_hl hdf5"

    #. /usr/local/share/venv/bin/activate


%post

    apt-get update && apt-get upgrade -y
    apt-get install -y gpg-agent
    apt-get install -y wget file vim subversion time
    apt-get install -y liburi-perl m4 libxml-parser-perl psmisc
    apt-get install -y python3-dev python3-pip python3-setuptools python3-venv
    apt-get install -y cmake make cmake-curses-gui
    apt-get install -y g++ libopenmpi-dev
    apt-get install -y npm
    apt-get install -y libcurl4-openssl-dev
    apt-get install -y libzstd-dev
    apt-get install -y valgrind

    # build vernier
    git clone https://github.com/MetOffice/Vernier.git
    cd Vernier 
    mkdir build
    cd build
    cmake .. -DCMAKE_CXX_COMPILER=nvc++ -DCMAKE_C_COMPILER=nvc -DCMAKE_Fortran_COMPILER=nvfortran -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF
    make && make install

    # # java is required by TAU
    # apt-get install -y default-jre
    # apt-get install -y default-jdk
    # wget http://tau.uoregon.edu/tau.tgz
    # tar xf tau.tgz
    # cd tau-2.34
    # ./installtau -c++=nvc++ -fortran=nvfortran -mpi -openmp -openacc

    # create links
    ln -s /usr/bin/python3 /usr/bin/python

    # cylc 8
    pip install cylc-flow cylc-uiserver cylc-rose metomi-rose

    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

    # environment to build LFRic dependencies
    export F90_VENDOR=PG
    export F90=nvfortran
    export CC=nvcc
    export CXX=nvc++
    # need to choose the right mpi versions of the compilers
    export MPI_BINDIR=/opt/nvidia/hpc_sdk/Linux_x86_64/{{ NVHPC_VERSION }}/comm_libs/openmpi4/bin/
    export MPIF90=$MPI_BINDIR/mpif90 # nvidia
    export MPICC=$MPI_BINDIR/mpicc
    export MPICXX=$MPI_BINDIR/mpicxx

    export INSTALL_DIR=/usr/local
    mkdir -p $INSTALL_DIR
    export BUILD_DIR=/usr/local/build
    mkdir -p $BUILD_DIR

    # Install spack
    cd $BUILD_DIR
    git clone -c feature.manyFiles=true https://github.com/spack/spack.git
    . spack/share/spack/setup-env.sh

    # create virtual environment
    #python3 -m venv /usr/local/share/venv
    #. /usr/local/share/venv/bin/activate
    #pip install Psyclone jinja2

    # rose picker needs to be cloned and installed by hand as it reuires a password
    #svn co https://code.metoffice.gov.uk/svn/lfric/GPL-utilities/trunk rose-picker
    #cd rose-picker
    #pip3 install -e .

    # need to install cylc
    #pip3 install cylc-flow cylc-uiserver cylc-rose metomi-rose

    # mosrs, fcm, rose...
    # Pretend we build a vagrant VM
    git clone -b nocylc7 --single-branch https://github.com/pletzer/metomi-vms.git /vagrant
    cd /vagrant
    echo "> Replacing vm -> apptainer in rose.conf files..."
    for f in ./opt/metomi-site/etc/rose/rose.conf ./opt/metomi-site/etc/rose.conf.redhat ./opt/metomi-site/etc/rose.conf; do
        sed -i 's/automatic\-options=SITE=vm/automatic\-options=SITE=apptainer/g' $f
    done
    cd /vagrant
    echo "> Installing MOSRS, cylc..."
    bash -x install.sh ubuntu 2204 mosrs

    # # zlib
    # version="1.3.1"
    # cd $BUILD_DIR
    # wget https://www.zlib.net/zlib-${version}.tar.gz
    # tar xf zlib-${version}.tar.gz 
    # cd zlib-${version}/
    # mkdir build
    # cd build/
    # CC=$MPICC ../configure  --prefix=$INSTALL_DIR --enable-shared
    # make && make install

    # hdf5
    version="1.10.7"
    major_version=$(echo $version | perl -ne 's/^(\d+)\.(\d+).*/$1.$2/;print;')
    version_no_dash=$(echo $version | perl -ne 's/\-\d+//;print;')
    cd $BUILD_DIR
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${major_version}/hdf5-${version_no_dash}/src/hdf5-${version}.tar.gz
    tar xf hdf5-${version}.tar.gz && cd hdf5-${version} && mkdir build && cd build
    #CFLAGS="-O3 -fPIC" CXXFLAGS="-O3 -fPIC" FCFLAGS="-O3 -fPIC" CC=$MPICC FC=$MPIF90 CXX=MPICXX ../configure --prefix=$INSTALL_DIR --enable-shared --enable-fortran --enable-fortran2003 --enable-parallel
    FC=$MPIF90 CC=$MPICC CXX=$MPICXX cmake \
            -DHDF5_ENABLE_PARALLEL=ON -DHDF5_BUILD_FORTRAN=ON -DHDF5_BUILD_CPP_LIB:BOOL=OFF -DHDF5_ENABLE_Z_LIB_SUPPORT=ON \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR ..
    make -j 8; make install

    # netcdf-c
    version="4.9.2"
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-c/${version}/netcdf-c-${version}.tar.gz
    tar xf netcdf-c-${version}.tar.gz
    cd netcdf-c-${version}
    mkdir build
    cd build
    CFLAGS="-O3 -fPIC" CXXFLAGS="-O3 -fPIC" FCFLAGS="-O3 -fPIC" CC=$MPICC CXX=$MPICXX FC=$MPIF90 \
         ../configure --prefix=$INSTALL_DIR --disable-byterange --disable-libxml2
    make -j 4
    make install

    # netcdf-fortran
    version="4.6.1"
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-fortran/${version}/netcdf-fortran-${version}.tar.gz
    tar xf netcdf-fortran-${version}.tar.gz
    cd netcdf-fortran-${version}
    mkdir build
    cd build
    FC=$MPIF90 CC=$MPICC CXX=$MPICXX \
        cmake -DCMAKE_PREFIX_PATH=$INSTALL_DIR -DENABLE_FORTRAN_TYPE_CHECKS=OFF \
        -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCMAKE_BUILD_TYPE=Release ..
    make
    make install

    # netcdf-cxx
    version="4.3.1"
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-cxx/${version}/netcdf-cxx4-${version}.tar.gz
    tar xf netcdf-cxx4-${version}.tar.gz
    cd netcdf-cxx4-${version}
    mkdir build
    cd build
    LDFLAGS="-L$INSTALL_DIR/lib -lnetcdf -lhdf5_hl -lhdf5" CFLAGS="-O3 -fPIC" CXXFLAGS="-O3 -fPIC" FCFLAGS="-O3 -fPIC" \
            CXX=$MPICXX CC=$MPICC ../configure --prefix=$INSTALL_DIR
    make -j 4
    make install

    # yaxt
    version="0.9.0"
    cd $BUILD_DIR
    wget https://swprojects.dkrz.de/redmine/attachments/download/498/yaxt-${version}.tar.gz
    tar -xzf yaxt-${version}.tar.gz
    cd yaxt-${version} && mkdir build && cd build
    ../configure --prefix=$INSTALL_DIR --with-idxtype=long \
            CC=$MPICC FC="$MPIF90 -cpp" \
            CFLAGS="-O3 -fPIC" CXXFLAGS="-O3 -fPIC" FCFLAGS="-O3 -fPIC" --without-regard-for-quality
    make && make install

    # xios
    # may want to set the revision to be the latest release
    # may want to check that the version support -180, 180 longitudes
    # need to have some perl packages installed, cpan URI:URL
    cd $BUILD_DIR
    svn --non-interactive --trust-server-cert-failures="other,unknown-ca,cn-mismatch,expired" co http://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/trunk XIOS -r {2024-08-11}
    cd XIOS

    # copy the architecture settings
    # there is no NVHPC_LINUX architecture, we pretend it is GCC_LINUX
    for suffix in env fcm path; do
        wget https://raw.githubusercontent.com/pletzer/ngarch_apptainer/main/packages/xios/arch-NVHPC_LINUX.${suffix}
        mv arch-NVHPC_LINUX.${suffix} arch/arch-GCC_LINUX.${suffix}
    done

    # fix, need to cast into std::string
    cp src/string_tools.hpp src/string_tools.hpp.ori
    sed -i 's/"$1"/std::string("$1")/' src/string_tools.hpp

    ./make_xios --full --arch GCC_LINUX --job 6

    # copy the files over
    mkdir -p $INSTALL_DIR/xios/lib
    cp lib/lib*.a $INSTALL_DIR/xios/lib
    mkdir -p $INSTALL_DIR/xios/include
    cp inc/*.mod $INSTALL_DIR/xios/include
    mkdir -p $INSTALL_DIR/xios/bin
    cp bin/* $INSTALL_DIR/xios/bin

    # pFUnit
    # does not yet support the nividia compilers









